#!/usr/bin/perl

###############################################################################
#
# The background rendering script.  This exists to make sure the system is 
# productive even during "idle" time (client-wise), and helps minimize the 
# number of rendering waits the user is subject to.
#
###############################################################################

use DBI;
use lib '/var/www/pp/noosphere/lib';

use Noosphere qw($dbh $DEBUG);
use Noosphere::DB;
use Noosphere::Cache;
use Noosphere::Config;
use Noosphere::Cache;
use Noosphere::Util;

my @methods = ('l2h', 'png','src');
#my @methods = ('l2h');
my $table = Noosphere::getConfig('en_tbl');
my $runfile = "/var/www/pp/noosphere/bin/run/renderall.running";

$|=1;

if ( -e $runfile ) {
	exit 1;
}

`echo 1 > $runfile`;

$DEBUG = 2;	 # dont need debugging of database access

open STDERR, ">../log/error-renderall";

# connect to the database
#
$dbh = Noosphere::dbConnect;

print "removing dead objects";

# remove dead objects
#
my ($rv,$sth) = Noosphere::dbLowLevelSelect($dbh,"select cache.objectid from cache left outer join objects on cache.objectid = objects.uid where objects.uid is null");
while (my $row = $sth->fetchrow_hashref()) {
	print "dangling cacheref ($row->{objectid}), deleting\n";
	Noosphere::deletecacheflags($table,$row->{objectid});
}
$sth->finish();

print "checking for invalid objects and rendering\n";

foreach my $method (@methods) {
	while (my $row = getNextRow($method)) {
	
		# message, and fix timed out build
		#
		if ($row->{'build'}==1) {
			print "timed out $row->{title} ($row->{objectid}), rerendering ";
			Noosphere::setbuildflag_off($table,$row->{'objectid'},$method);
		} else {
			print "rendering $row->{title} ($row->{objectid}) ";
		}

		# get the full row record
		#
		my ($rv,$sth) = Noosphere::dbSelect($dbh,{WHAT=>"*",FROM=>$table,WHERE=>"uid=$row->{objectid}"});
		my $rec = $sth->fetchrow_hashref();
		$sth->finish();

		print "got rec $rec->{title} $rec->{uid}\n";
		my ($build,$valid)=Noosphere::getcacheflags($table,$rec->{uid},$method);
		print "cache flags build=$build, valid=$valid\n";

		# render the object to cache
		#
		print "[$method]";
	
		open(OLDOUT, ">&STDOUT");
		open STDOUT, ">>/var/www/pp/log/stdout-renderall";
		Noosphere::cacheObject($table, $rec, $method);
		open(STDOUT, ">&OLDOUT");

		print "\n";
	}

}

close STDERR;

`rm $runfile`;

###############################################################################

sub getNextRow {
	my $method = shift;

	my $table = Noosphere::getConfig('en_tbl');
	
	my $int;
	$int = "interval '10 minutes'" if Noosphere::getConfig('dbms') eq 'pg';
	$int = "interval 10 MINUTE" if Noosphere::getConfig('dbms') eq 'mysql';
	
	my ($rv,$sth) = Noosphere::dbSelect($dbh,{
		 WHAT => "cache.objectid,cache.build,cache.touched,$table.title",
		 FROM => "cache,$table",
		 WHERE => "cache.valid=0 and (cache.build=0 or cache.touched <= now() - $int) and $table.uid=cache.objectid and method='$method'",
		 LIMIT => 1});

	return undef if ($sth->rows()<1);
	
	my $row = $sth->fetchrow_hashref();
	$sth->finish();

	return $row;
}

